/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace RpcContractThrift
{

  /// <summary>
  /// HelloResult实体
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HelloResult : TBase
  {
    private string _Name;
    private string _Gender;
    private string _Head;

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Gender
    {
      get
      {
        return _Gender;
      }
      set
      {
        __isset.Gender = true;
        this._Gender = value;
      }
    }

    public string Head
    {
      get
      {
        return _Head;
      }
      set
      {
        __isset.Head = true;
        this._Head = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Name;
      public bool Gender;
      public bool Head;
    }

    public HelloResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Gender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Head = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HelloResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Gender != null && __isset.Gender) {
          field.Name = "Gender";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Gender);
          oprot.WriteFieldEnd();
        }
        if (Head != null && __isset.Head) {
          field.Name = "Head";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Head);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HelloResult(");
      bool __first = true;
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Gender != null && __isset.Gender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gender: ");
        __sb.Append(Gender);
      }
      if (Head != null && __isset.Head) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Head: ");
        __sb.Append(Head);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
